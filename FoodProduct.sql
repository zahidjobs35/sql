
--CUSTOMER  ( CUSTID, CUSTLASTNAME, CUSTFIRSTNAME, CUSTADDRESS, CUSTSTATE, CUSTZIP, CUSTEMAIL, CUSTPHONE)

--SUPPLIER  ( SUPPID, SUPPLASTNAME, SUPPFIRSTNAME, SUPPADDRESS, SUPPSTATE, SUPPZIP, SUPPEMAIL, SUPPPHONE)

--PRODUCT  ( PRODID, PRODNAME, UNITPRICE, EXPIREDATE, PRODTYPE, DESCRIPTION, STOCK, SUPPID)

--STOCK  ( STOCKID, STOCKDATE, DESCRIPTION, PRODID, QUANTITY, REORDERLEVEL)

--ORDERS  ( ORDERID, ORDERDATE, DESCRIPTION, PRODID, QUANTITY, TOTALPRICE, CUSTID)  

DROP TABLE CUSTOMER CASCADE CONSTRAINTS;

CREATE TABLE CUSTOMER  (
  CUSTID  			NUMBER(10),
  CUSTLASTNAME  	VARCHAR2(100),
  CUSTFIRSTNAME  	VARCHAR2(100),
  CUSTADDRESS  		VARCHAR2(150),
  CUSTSTATE  		VARCHAR2(30),
  CUSTZIP  			VARCHAR2(30),
  CUSTEMAIL  		VARCHAR2(30),
  CUSTPHONE  		VARCHAR2(30),
  PRIMARY KEY (CUSTID)
);

DROP SEQUENCE SEQ_CUST_ID;

CREATE SEQUENCE SEQ_CUST_ID
 START WITH     1000
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;


DROP TABLE SUPPLIER CASCADE CONSTRAINTS;

CREATE TABLE SUPPLIER  (
  SUPPID  			NUMBER(10),
  SUPPLASTNAME  	VARCHAR2(100),
  SUPPFIRSTNAME  	VARCHAR2(100),
  SUPPADDRESS  		VARCHAR2(150),
  SUPPSTATE  		VARCHAR2(30),
  SUPPZIP  			VARCHAR2(30),
  SUPPEMAIL   		VARCHAR2(30),
  SUPPPHONE  		VARCHAR2(30),
  PRIMARY KEY (SUPPID)
);


DROP SEQUENCE SEQ_SUPP_ID;

CREATE SEQUENCE SEQ_SUPP_ID
 START WITH     1000
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;
 
 
DROP TABLE PRODUCT CASCADE CONSTRAINTS;

CREATE TABLE PRODUCT  (
  PRODID  			NUMBER(10),
  PRODNAME  		VARCHAR2(100),
  UNITPRICE  		NUMBER(12,2),
  EXPIREDATE  		DATE,
  PRODTYPE  		VARCHAR2(2),
  DESCRIPTION  		VARCHAR2(100),
  STOCK 			NUMBER(10),
  SUPPID 			NUMBER(10),
  PRIMARY KEY (PRODID)  
);


DROP SEQUENCE SEQ_PROD_ID;

CREATE SEQUENCE SEQ_PROD_ID
 START WITH     1000
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;
 
 
DROP TABLE STOCK CASCADE CONSTRAINTS;

CREATE TABLE STOCK  (
  STOCKID  			NUMBER(10),
  STOCKDATE  		DATE,
  DESCRIPTION  		VARCHAR2(100),
  PRODID  			NUMBER(10),
  QUANTITY  		NUMBER(10),
  REORDERLEVEL   	NUMBER(10),
  PRIMARY KEY (STOCKID)  
);


DROP SEQUENCE SEQ_STOCK_ID;

CREATE SEQUENCE SEQ_STOCK_ID
 START WITH     1000
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;
 
 
DROP TABLE ORDERS CASCADE CONSTRAINTS;


CREATE TABLE ORDERS  (
  ORDERID  			NUMBER(10),
  ORDERDATE  		DATE,
  DESCRIPTION  		VARCHAR2(100),
  PRODID  			NUMBER(10),
  QUANTITY  		NUMBER(10),
  TOTALPRICE  		NUMBER(10),
  CUSTID  			NUMBER(10),
  PRIMARY KEY (ORDERID) ;
  
  
  
DROP SEQUENCE SEQ_ORDER_ID;

CREATE SEQUENCE SEQ_ORDER_ID
 START WITH     1000
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;
 
 
ALTER TABLE ORDERS
ADD CONSTRAINT FK_CUST_ID
FOREIGN KEY (CUSTID)
REFERENCES CUSTOMER(CUSTID);


ALTER TABLE ORDERS
ADD CONSTRAINT FK_PRODO_ID
FOREIGN KEY (PRODID)
REFERENCES PRODUCT(PRODID);


ALTER TABLE STOCK
ADD CONSTRAINT FK_PROD_ID
FOREIGN KEY (PRODID)
REFERENCES PRODUCT(PRODID);


ALTER TABLE PRODUCT
ADD CONSTRAINT FK_SUPP_ID
FOREIGN KEY (SUPPID)
REFERENCES SUPPLIER(SUPPID);



CREATE UNIQUE INDEX PROD_PROD_NAME_UN ON PRODUCT(PRODNAME);


CREATE UNIQUE INDEX CUST_PHONE_UN ON CUSTOMER(CUSTPHONE);


CREATE UNIQUE INDEX SUPP_EMAIL_UN ON SUPPLIER(SUPPEMAIL);

---------------------------------

--CUSTOMER  ( CUSTID, CUSTLASTNAME, CUSTFIRSTNAME, CUSTADDRESS, CUSTSTATE, CUSTZIP, CUSTEMAIL, CUSTPHONE)

--SUPPLIER  ( SUPPID, SUPPLASTNAME, SUPPFIRSTNAME, SUPPADDRESS, SUPPSTATE, SUPPZIP, SUPPEMAIL, SUPPPHONE)

--PRODUCT  ( PRODID, PRODNAME, UNITPRICE, EXPIREDATE, PRODTYPE, DESCRIPTION, STOCK, SUPPID)

--STOCK  ( STOCKID, STOCKDATE, DESCRIPTION, PRODID, QUANTITY, REORDERLEVEL)

--ORDERS  ( ORDERID, ORDERDATE, DESCRIPTION, PRODID, QUANTITY, TOTALPRICE, CUSTID)  


ALTER TABLE CUSTOMER ADD
( CREATED_BY    VARCHAR2(30),
  DATE_CREATED  DATE,
  MODIFIED_BY   VARCHAR2(30),
  DATE_MODIFIED DATE
);

ALTER TABLE SUPPLIER ADD
( CREATED_BY    VARCHAR2(30),
  DATE_CREATED  DATE,
  MODIFIED_BY   VARCHAR2(30),
  DATE_MODIFIED DATE
);

ALTER TABLE PRODUCT ADD
( CREATED_BY    VARCHAR2(30),
  DATE_CREATED  DATE,
  MODIFIED_BY   VARCHAR2(30),
  DATE_MODIFIED DATE
);

ALTER TABLE ORDERS ADD
( CREATED_BY    VARCHAR2(30),
  DATE_CREATED  DATE,
  MODIFIED_BY   VARCHAR2(30),
  DATE_MODIFIED DATE
);

ALTER TABLE STOCK ADD
( CREATED_BY    VARCHAR2(30),
  DATE_CREATED  DATE,
  MODIFIED_BY   VARCHAR2(30),
  DATE_MODIFIED DATE
);
  




CREATE OR REPLACE VIEW VW_CUST AS
SELECT CUSTLASTNAME, CUSTFIRSTNAME, CUSTADDRESS FROM CUSTOMER;


CREATE OR REPLACE VIEW VW_SUPP AS
SELECT SUPPLASTNAME, SUPPADDRESS, SUPPEMAIL FROM SUPPLIER;


CREATE OR REPLACE VIEW VW_PROD AS
SELECT PRODNAME, UNITPRICE, STOCK FROM PRODUCT;


CREATE OR REPLACE VIEW VW_STOCK AS
SELECT STOCKDATE, PRODID, QUANTITY FROM STOCK;


CREATE OR REPLACE VIEW VW_ORDER AS
SELECT ORDERDATE, PRODID, QUANTITY, TOTALPRICE FROM ORDERS;



DROP SEQUENCE SEQ_CUST_ID;

CREATE SEQUENCE SEQ_CUST_ID
 START WITH     1000
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;
 
 
 DROP SEQUENCE SEQ_SUPP_ID;

CREATE SEQUENCE SEQ_SUPP_ID
 START WITH     1000
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;
 
 
 DROP SEQUENCE SEQ_PROD_ID;

CREATE SEQUENCE SEQ_PROD_ID
 START WITH     1000
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;
 
 
 DROP SEQUENCE SEQ_STOCK_ID;

CREATE SEQUENCE SEQ_STOCK_ID
 START WITH     1000
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;
 
 
 DROP SEQUENCE SEQ_ORDER_ID;

CREATE SEQUENCE SEQ_ORDER_ID
 START WITH     1000
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;
 



 --THIS TRIGGER POPULATES SURROGATE KEY AND AUDIT COLUMNS WITH APPROPRIATE VALUES
CREATE OR REPLACE TRIGGER PROD_CUST_TRG
  BEFORE INSERT OR UPDATE ON CUSTOMER
  FOR EACH ROW
BEGIN
  -- USE SURROGATE KEY
  IF :NEW.CUSTID IS NULL THEN
    :NEW.CUSTID := SEQ_CUST_ID.NEXTVAL;
  END IF;  
  IF INSERTING THEN
    IF :NEW.CREATED_BY IS NULL THEN :NEW.CREATED_BY := USER; END IF;
    IF :NEW.DATE_CREATED IS NULL THEN :NEW.DATE_CREATED := SYSDATE; END IF;
  END IF;  
  IF INSERTING OR UPDATING THEN
    IF :NEW.MODIFIED_BY IS NULL THEN :NEW.MODIFIED_BY := USER; END IF;
    IF :NEW.DATE_MODIFIED IS NULL THEN :NEW.DATE_MODIFIED := SYSDATE; END IF;
  END IF;
END;
/



 --THIS TRIGGER POPULATES SURROGATE KEY AND AUDIT COLUMNS WITH APPROPRIATE VALUES
CREATE OR REPLACE TRIGGER PROD_SUPP_TRG
  BEFORE INSERT OR UPDATE ON SUPPLIER
  FOR EACH ROW
BEGIN
  -- USE SURROGATE KEY
  IF :NEW.SUPPID IS NULL THEN
    :NEW.SUPPID := SEQ_SUPP_ID.NEXTVAL;
  END IF;  
  IF INSERTING THEN
    IF :NEW.CREATED_BY IS NULL THEN :NEW.CREATED_BY := USER; END IF;
    IF :NEW.DATE_CREATED IS NULL THEN :NEW.DATE_CREATED := SYSDATE; END IF;
  END IF;  
  IF INSERTING OR UPDATING THEN
    IF :NEW.MODIFIED_BY IS NULL THEN :NEW.MODIFIED_BY := USER; END IF;
    IF :NEW.DATE_MODIFIED IS NULL THEN :NEW.DATE_MODIFIED := SYSDATE; END IF;
  END IF;
END;
/


 --THIS TRIGGER POPULATES SURROGATE KEY AND AUDIT COLUMNS WITH APPROPRIATE VALUES
CREATE OR REPLACE TRIGGER PROD_ID_TRG
  BEFORE INSERT OR UPDATE ON PRODUCT
  FOR EACH ROW
BEGIN
  -- USE SURROGATE KEY
  IF :NEW.PRODID IS NULL THEN
    :NEW.PRODID := SEQ_PROD_ID.NEXTVAL;
  END IF;  
  IF INSERTING THEN
    IF :NEW.CREATED_BY IS NULL THEN :NEW.CREATED_BY := USER; END IF;
    IF :NEW.DATE_CREATED IS NULL THEN :NEW.DATE_CREATED := SYSDATE; END IF;
  END IF;  
  IF INSERTING OR UPDATING THEN
    IF :NEW.MODIFIED_BY IS NULL THEN :NEW.MODIFIED_BY := USER; END IF;
    IF :NEW.DATE_MODIFIED IS NULL THEN :NEW.DATE_MODIFIED := SYSDATE; END IF;
  END IF;
END;
/



 --THIS TRIGGER POPULATES SURROGATE KEY AND AUDIT COLUMNS WITH APPROPRIATE VALUES
CREATE OR REPLACE TRIGGER PROD_STOCK_TRG
  BEFORE INSERT OR UPDATE ON STOCK
  FOR EACH ROW
BEGIN
  -- USE SURROGATE KEY
  IF :NEW.STOCKID IS NULL THEN
    :NEW.STOCKID := SEQ_STOCK_ID.NEXTVAL;
  END IF;  
  IF INSERTING THEN
    IF :NEW.CREATED_BY IS NULL THEN :NEW.CREATED_BY := USER; END IF;
    IF :NEW.DATE_CREATED IS NULL THEN :NEW.DATE_CREATED := SYSDATE; END IF;
  END IF;  
  IF INSERTING OR UPDATING THEN
    IF :NEW.MODIFIED_BY IS NULL THEN :NEW.MODIFIED_BY := USER; END IF;
    IF :NEW.DATE_MODIFIED IS NULL THEN :NEW.DATE_MODIFIED := SYSDATE; END IF;
  END IF;
END;
/


 --THIS TRIGGER POPULATES SURROGATE KEY AND AUDIT COLUMNS WITH APPROPRIATE VALUES
CREATE OR REPLACE TRIGGER PROD_ORDER_TRG
  BEFORE INSERT OR UPDATE ON ORDERS
  FOR EACH ROW
BEGIN
  -- USE SURROGATE KEY
  IF :NEW.ORDERID IS NULL THEN
    :NEW.ORDERID := SEQ_ORDER_ID.NEXTVAL;
  END IF;  
  IF INSERTING THEN
    IF :NEW.CREATED_BY IS NULL THEN :NEW.CREATED_BY := USER; END IF;
    IF :NEW.DATE_CREATED IS NULL THEN :NEW.DATE_CREATED := SYSDATE; END IF;
  END IF;  
  IF INSERTING OR UPDATING THEN
    IF :NEW.MODIFIED_BY IS NULL THEN :NEW.MODIFIED_BY := USER; END IF;
    IF :NEW.DATE_MODIFIED IS NULL THEN :NEW.DATE_MODIFIED := SYSDATE; END IF;
  END IF;
END;
/




SELECT TABLE_NAME FROM USER_TABLES;  

SELECT OBJECT_NAME, STATUS, CREATED, LAST_DDL_TIME FROM USER_OBJECTS;

-------------------------------------



--CUSTOMER  ( CUSTID, CUSTLASTNAME, CUSTFIRSTNAME, CUSTADDRESS, CUSTSTATE, CUSTZIP, CUSTEMAIL, CUSTPHONE)

--SUPPLIER  ( SUPPID, SUPPLASTNAME, SUPPFIRSTNAME, SUPPADDRESS, SUPPSTATE, SUPPZIP, SUPPEMAIL, SUPPPHONE)

--PRODUCT  ( PRODID, PRODNAME, UNITPRICE, EXPIREDATE, PRODTYPE, DESCRIPTION, STOCK, SUPPID)

--STOCK  ( STOCKID, STOCKDATE, DESCRIPTION, PRODID, QUANTITY, REORDERLEVEL)

--ORDERS  ( ORDERID, ORDERDATE, DESCRIPTION, PRODID, QUANTITY, TOTALPRICE, CUSTID) 
 
INSERT INTO CUSTOMER (CUSTID, CUSTLASTNAME, CUSTFIRSTNAME, CUSTADDRESS, CUSTSTATE, CUSTZIP, CUSTEMAIL, CUSTPHONE)
VALUES (1,'ARAY', 'DIYA', 'NEWYORK', 'NY', 25632, 'ARAY@GMAIL.COM', '012-852-5632');
INSERT INTO CUSTOMER (CUSTID, CUSTLASTNAME, CUSTFIRSTNAME, CUSTADDRESS, CUSTSTATE, CUSTZIP, CUSTEMAIL, CUSTPHONE)
VALUES (2,'BERDAHL', 'TARA', 'NEWYORK', 'NY', 25632, 'KT874@MAIL.COM', '012-852-5633');
INSERT INTO CUSTOMER (CUSTID, CUSTLASTNAME, CUSTFIRSTNAME, CUSTADDRESS, CUSTSTATE, CUSTZIP, CUSTEMAIL, CUSTPHONE)
VALUES (3,'ESPINOZA', 'KERRY', 'NEWYORK', 'NY', 25632, 'ESPINOZA@MAIL.COM', '012-852-5634');
INSERT INTO CUSTOMER (CUSTID, CUSTLASTNAME, CUSTFIRSTNAME, CUSTADDRESS, CUSTSTATE, CUSTZIP, CUSTEMAIL, CUSTPHONE)
VALUES (4,'FLAKE', 'AARON', 'NEWYORK', 'NY', 25632, 'FLAKEA@MAIL.COM', '012-852-5635');
INSERT INTO CUSTOMER (CUSTID, CUSTLASTNAME, CUSTFIRSTNAME, CUSTADDRESS, CUSTSTATE, CUSTZIP, CUSTEMAIL, CUSTPHONE)
VALUES (5,'HOLDEN', 'LAUREN', 'NEWYORK', 'NY', 25632, 'HOLDEN238@MAIL.COM', '012-852-5636');

-----------------

INSERT INTO SUPPLIER ( SUPPID, SUPPLASTNAME, SUPPFIRSTNAME, SUPPADDRESS, SUPPSTATE, SUPPZIP, SUPPEMAIL, SUPPPHONE)
VALUES (1,'NAYAN', 'SUMI', 'NEWYORK', 'NY', 25632, 'NAYAN@YAHOO.COM', '012-852-5632');
INSERT INTO SUPPLIER ( SUPPID, SUPPLASTNAME, SUPPFIRSTNAME, SUPPADDRESS, SUPPSTATE, SUPPZIP, SUPPEMAIL, SUPPPHONE)
VALUES (2,'KENNER', 'JASON', 'NEWYORK', 'NY', 25632, 'JKENNER@MAIL.COM', '012-852-5612');
INSERT INTO SUPPLIER ( SUPPID, SUPPLASTNAME, SUPPFIRSTNAME, SUPPADDRESS, SUPPSTATE, SUPPZIP, SUPPEMAIL, SUPPPHONE)
VALUES (3,'MARTINEZ', 'EUGENE', 'NEWYORK', 'NY', 25632, 'EMARTINEZ@MAIL.COM', '012-852-5624');
INSERT INTO SUPPLIER ( SUPPID, SUPPLASTNAME, SUPPFIRSTNAME, SUPPADDRESS, SUPPSTATE, SUPPZIP, SUPPEMAIL, SUPPPHONE)
VALUES (4,'NELSON', 'SHANE', 'NEWYORK', 'NY', 25632, 'NELSON_SHANE@MAIL.COM', '012-852-5662');
INSERT INTO SUPPLIER ( SUPPID, SUPPLASTNAME, SUPPFIRSTNAME, SUPPADDRESS, SUPPSTATE, SUPPZIP, SUPPEMAIL, SUPPPHONE)
VALUES (5,'SHAW', 'DEBBY', 'NEWYORK', 'NY', 25632, 'DSHAW84@MAIL.COM', '012-852-5647');

----------------------


INSERT INTO PRODUCT(PRODID, PRODNAME, UNITPRICE, EXPIREDATE, PRODTYPE, DESCRIPTION, STOCK, SUPPID)
VALUES (1,'P1', 200, '01-JAN-2017', 'N', 'GOOD', 20, 1);
INSERT INTO PRODUCT(PRODID, PRODNAME, UNITPRICE, EXPIREDATE, PRODTYPE, DESCRIPTION, STOCK, SUPPID)
VALUES (2,'P1', 200, '01-JAN-2017', 'N', 'GOOD', 20, 1);
INSERT INTO PRODUCT(PRODID, PRODNAME, UNITPRICE, EXPIREDATE, PRODTYPE, DESCRIPTION, STOCK, SUPPID)
VALUES (3,'P1', 200, '01-JAN-2017', 'N', 'GOOD', 20, 1);
INSERT INTO PRODUCT(PRODID, PRODNAME, UNITPRICE, EXPIREDATE, PRODTYPE, DESCRIPTION, STOCK, SUPPID)
VALUES (4,'P1', 200, '01-JAN-2017', 'N', 'GOOD', 20, 1);
INSERT INTO PRODUCT(PRODID, PRODNAME, UNITPRICE, EXPIREDATE, PRODTYPE, DESCRIPTION, STOCK, SUPPID)
VALUES (5,'P1', 200, '01-JAN-2017', 'N', 'GOOD', 20, 1);

------------------------

INSERT INTO STOCK( STOCKID, STOCKDATE, DESCRIPTION, PRODID, QUANTITY, REORDERLEVEL)
VALUES (1,'25-OCT-2016', 'SHORT', 1,5, 10);
INSERT INTO STOCK( STOCKID, STOCKDATE, DESCRIPTION, PRODID, QUANTITY, REORDERLEVEL)
VALUES (2,'25-OCT-2016', 'REORDER', 1,25, 15);
INSERT INTO STOCK( STOCKID, STOCKDATE, DESCRIPTION, PRODID, QUANTITY, REORDERLEVEL)
VALUES (3,'25-OCT-2016', 'SHORT', 1,20, 10);
INSERT INTO STOCK( STOCKID, STOCKDATE, DESCRIPTION, PRODID, QUANTITY, REORDERLEVEL)
VALUES (4,'25-OCT-2016', 'SHORT', 1,35, 20);
INSERT INTO STOCK( STOCKID, STOCKDATE, DESCRIPTION, PRODID, QUANTITY, REORDERLEVEL)
VALUES (5,'25-OCT-2016', 'SHORT', 1,45, 20);

-----------------------
INSERT INTO ORDERS  ( ORDERID, ORDERDATE, DESCRIPTION, PRODID, QUANTITY, TOTALPRICE, CUSTID) 
VALUES (1,'25-OCT-2016', 'GOOD', 1,5,100,1);
INSERT INTO ORDERS  ( ORDERID, ORDERDATE, DESCRIPTION, PRODID, QUANTITY, TOTALPRICE, CUSTID) 
VALUES (2,'25-OCT-2016', 'GOOD', 1,15,200,1);
INSERT INTO ORDERS  ( ORDERID, ORDERDATE, DESCRIPTION, PRODID, QUANTITY, TOTALPRICE, CUSTID) 
VALUES (3,'25-OCT-2016', 'GOOD', 1,25,300,1);
INSERT INTO ORDERS  ( ORDERID, ORDERDATE, DESCRIPTION, PRODID, QUANTITY, TOTALPRICE, CUSTID) 
VALUES (4,'25-OCT-2016', 'GOOD', 1,20,500,1);
INSERT INTO ORDERS  ( ORDERID, ORDERDATE, DESCRIPTION, PRODID, QUANTITY, TOTALPRICE, CUSTID) 
VALUES (5,'25-OCT-2016', 'GOOD', 1,35,250,1);



--------------------------

SELECT * FROM CUSTOMER;

SELECT * FROM SUPPLIER;

SELECT * FROM PRODUCT;

SELECT * FROM STOCK;

SELECT * FROM ORDERS;


-------------------------


SELECT * FROM CUSTOMER
WHERE ROWNUM <=5; 

SELECT * FROM SUPPLIER
WHERE ROWNUM <=5;

SELECT * FROM PRODUCT
WHERE ROWNUM <=5;

SELECT * FROM STOCK
WHERE ROWNUM <=5;

SELECT * FROM ORDERS
WHERE ROWNUM <=5;


---------------------


SELECT * FROM VW_STOCK;


SELECT * 
FROM PRODUCT, STOCK;


SELECT * 
FROM CUSTOMER
ORDER BY CUSTEMAIL;


SELECT C.CUSTFIRSTNAME, P.PRODNAME, O.ORDERDATE, O.QUANTITY, O.TOTALPRICE
FROM CUSTOMER C, ORDERS O, PRODUCT P
WHERE C.CUSTID = O.CUSTID
AND P.PRODID = O.PRODID;

SELECT DISTINCT C.CUSTFIRSTNAME, SUM(O.QUANTITY)
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID
GROUP BY C.CUSTFIRSTNAME;


SELECT C.CUSTFIRSTNAME
FROM CUSTOMER C
WHERE C.CUSTID in (1,2,5);


SELECT C.CUSTFIRSTNAME,LENGTH(C.CUSTFIRSTNAME)
FROM CUSTOMER C;


DELETE FROM CUSTOMER WHERE CUSTID = 1;

-- revert the change
ROLLBACK;



UPDATE ORDERS SET QUANTITY = 25 WHERE ORDERID = 3;


-- revert the change
ROLLBACK;



SELECT C.CUSTFIRSTNAME
FROM CUSTOMER C
WHERE C.CUSTID IN (SELECT CUSTID FROM ORDERS);








